{"remainingRequest":"/Users/marielak/Desktop/k8dash-website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/marielak/Desktop/k8dash-website/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/marielak/Desktop/k8dash-website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/marielak/Desktop/k8dash-website/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/marielak/Desktop/k8dash-website/docs/contribute/path.md?vue&type=template&id=b2622408&","dependencies":[{"path":"/Users/marielak/Desktop/k8dash-website/docs/contribute/path.md","mtime":1610059440524},{"path":"/Users/marielak/Desktop/k8dash-website/node_modules/cache-loader/dist/cjs.js","mtime":1610045292755},{"path":"/Users/marielak/Desktop/k8dash-website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1610045296631},{"path":"/Users/marielak/Desktop/k8dash-website/node_modules/cache-loader/dist/cjs.js","mtime":1610045292755},{"path":"/Users/marielak/Desktop/k8dash-website/node_modules/vue-loader/lib/index.js","mtime":1610045296630},{"path":"/Users/marielak/Desktop/k8dash-website/node_modules/@vuepress/markdown-loader/index.js","mtime":1610045292318}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
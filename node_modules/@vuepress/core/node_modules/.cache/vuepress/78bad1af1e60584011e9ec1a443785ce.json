{"remainingRequest":"/Users/sjacobs/git/k8dash-pages/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/sjacobs/git/k8dash-pages/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sjacobs/git/k8dash-pages/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sjacobs/git/k8dash-pages/docs/.vuepress/theme/components/custom/Home.vue?vue&type=template&id=4ce4d684&","dependencies":[{"path":"/Users/sjacobs/git/k8dash-pages/docs/.vuepress/theme/components/custom/Home.vue","mtime":1609216209247},{"path":"/Users/sjacobs/git/k8dash-pages/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sjacobs/git/k8dash-pages/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/sjacobs/git/k8dash-pages/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sjacobs/git/k8dash-pages/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}